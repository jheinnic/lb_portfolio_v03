  constructor: ($localForageProvider) ->
    # Intentionally do not configure the default localForageProvider instance.  Do this so we can co-exist
    # with any other client code which is also using localForage.  Instead, we will use the provider to capture
    # any necessity to override the default names we use for the localForage instance Repository uses and in
    # the constructor for Repository we will allocate those instances as dynamic instances so they will still
    # be available before first needed.
    # _localForageProvider = $localForageProvider

    # Use function closure scope to set the non-property class reference to treat $localForageProvider as a
    # global variable.  If RepositoryProvider was not a singleton, we would have to use an associative hash to
    # disambiguate one RepositoryProvider's injected instance from another RepositoryProvider's, but since
    # we are a Singleton, we don't need to make that safeguard..
    # localForageProvider = () -> return _localForageProvider


    # For the less sensitive name properties, we'll just declare getter/setter methods and share them with
    # our public consumers.

    _instanceName = 'ptfRepo'
    _storeName = 'portfolioRepository'

    Object.defineProperties(
      @, {
        repoInstanceName: {
          get: () -> return _instanceName
          set: (x) ->
            throw new Error "Repository instance name must have a defined value" unless x?
            throw new Error "Repository instance name may not be blank" if x == ''
            throw new Error "Repository instance name must only contain alphabetic characters" unless /^[A-Za-z]+$/.match(x)
            _instanceName = x
        }
        repoStoreName: {
          get: () -> return _storeName
          set: (x) ->
            throw new Error "Repository store name must have a defined value" unless x?
            throw new Error "Repository store name may not be blank" if x == ''
            throw new Error "Repository store name must only contain alphabetic characters" unless /^[A-Za-z]+$/.match(x)
            _storeName = x
        }
      }
    )
